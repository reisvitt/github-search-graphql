{"version":3,"sources":["images/github_logo_icon.png","images/star_icon.png","images/fork_icon.png","images/github-graphql.png","images/code.png","components/Header/index.js","components/Form/index.js","components/UserRepos/index.js","components/UserData/index.js","components/Description/index.js","services/graphql/Query.js","pages/Home/index.js","services/client.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","Form","_ref","username","keyPressed","handleClick","errorMessage","Container","TextField","color","onChange","id","label","type","variant","onKeyDown","Button","onClick","UserRepos","repo","Row","Col","xs","sm","name","fork","forks","language","star","stargazers_count","href","html_url","UserData","profile","avatar_url","bio","followers","following","public_repos","Description","githubGraphql","code","GET_USER","gql","_templateObject","Home","_useState","useState","_useState2","Object","slicedToArray","setUsername","_useState3","_useState4","userData","setUserData","_useState5","_useState6","userRepos","setUserRepos","_useState7","_useState8","setErrorMessage","_useState9","_useState10","fullUsername","setFullUsername","_useLazyQuery","useLazyQuery","variables","login","_useLazyQuery2","searchUser","_useLazyQuery2$","called","loading","data","error","handleSearch","useEffect","user","avatarUrl","totalCount","repositories","Allrepos","nodes","map","push","primaryLanguage","url","stargazers","forkCount","repos","quantity","arguments","length","undefined","sort","b","splice","message","src_components_Header","src_components_Form","e","target","value","keyCode","src_components_UserData","src_components_UserRepos","key","CircularProgress","style","margin","opacity","src_components_Description","github","client","ApolloClient","request","operation","setContext","headers","authorization","concat","process","REACT_APP_TOKEN","uri","ReactDOM","render","react_common_esm","src_pages_Home","document","getElementById"],"mappings":"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","file":"static/js/main.49917735.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_logo_icon.84134458.png\";","module.exports = __webpack_public_path__ + \"static/media/star_icon.04c99d7f.png\";","module.exports = __webpack_public_path__ + \"static/media/fork_icon.24f36bf6.png\";","module.exports = __webpack_public_path__ + \"static/media/github-graphql.a53077a0.png\";","module.exports = __webpack_public_path__ + \"static/media/code.a77b250f.png\";","import React from \"react\";\nimport logo from \"../../images/github_logo_icon.png\";\nimport \"./index.css\";\n\nconst Header = () => {\n  return (\n    <div className=\"container_header\">\n      <img className=\"editImage\" src={logo} alt=\"GitHub_logo\" />\n\n      <span className=\"title\">GitHub Search</span>\n    </div>\n  );\n};\nexport default Header;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nimport \"./index.css\";\n\nconst Form = ({ username, keyPressed, handleClick, errorMessage }) => {\n  return (\n    <Container className=\"container_form\">\n      <div className=\"container_intern_form\">\n        <TextField\n          color=\"primary\"\n          onChange={username}\n          id=\"input\"\n          className=\"input_text\"\n          label=\"Search username\"\n          type=\"search\"\n          variant=\"outlined\"\n          onKeyDown={keyPressed}\n        />\n\n        <Button\n          onClick={handleClick}\n          className=\"button\"\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Search\n        </Button>\n      </div>\n\n      <span className=\"span_error\">{errorMessage}</span>\n    </Container>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport star from \"../../images/star_icon.png\";\nimport fork from \"../../images/fork_icon.png\";\nimport { Button } from \"@material-ui/core\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport \"./index.css\";\n\nconst UserRepos = ({ repo }) => {\n  return (\n    <Container className=\"container_repo\">\n      <Row>\n        <Col xs={12} sm={4} className=\"center\">\n          <span>{repo.name}</span>\n        </Col>\n        <Col xs={3} sm={1} className=\"center\">\n          <img className=\"image_repo\" src={fork} alt=\"fork_icon\" />\n          <span>{repo.forks}</span>\n        </Col>\n        <Col xs={6} sm={2} className=\"center\">\n          <span>{repo.language}</span>\n        </Col>\n        <Col xs={3} sm={1} className=\"center\">\n          <img className=\"image_repo\" src={star} alt=\"star_icon\" />\n          <span>{repo.stargazers_count}</span>\n        </Col>\n        <Col xs={12} sm={4} className=\"center\">\n          <Button href={repo.html_url} color=\"primary\" variant=\"outlined\">\n            Go to GitHub\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default UserRepos;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport \"./index.css\";\n\nconst UserData = ({ profile }) => {\n  return (\n    <Container>\n      <div className=\"center\">\n        <img\n          className=\"profile_pic\"\n          src={profile.avatar_url}\n          alt=\"profile_pic\"\n        />\n      </div>\n\n      <div className=\"description\">\n        <span>\n          <strong>Name:</strong> {profile.name}\n        </span>\n        <span>\n          <strong>Bio:</strong> {profile.bio}\n        </span>\n        <span>\n          <strong>Followers:</strong> {profile.followers}\n        </span>\n        <span>\n          <strong>Following:</strong> {profile.following}\n        </span>\n        <span>\n          <strong>Repositories:</strong> {profile.public_repos}\n        </span>\n      </div>\n    </Container>\n  );\n};\n\nexport default UserData;\n","import React from \"react\";\nimport githubGraphql from \"../../images/github-graphql.png\";\nimport code from \"../../images/code.png\";\nimport { Container } from \"reactstrap\";\nimport \"./index.css\";\n\nconst Description = () => {\n  return (\n    <Container className=\"container_explanation\">\n      <img className=\"pic_1\" src={githubGraphql} alt=\"githubAndGraphqlImage\" />\n\n      <div className=\"intern_container_explanation\">\n        <span className=\"span_text\">\n          Search app that uses GitHub API to retrieve user information when a\n          valid username is input. It display avatar, username, followers count,\n          repository count, top 5 repositories based on forks and stars.\n          <p>\n            <strong>Using GraphQL</strong>\n          </p>\n        </span>\n        <img className=\"pic_2\" src={code} alt=\"code_img\" />\n        <span className=\"span_text\"></span>\n      </div>\n    </Container>\n  );\n};\n\nexport default Description;\n","import { gql } from \"apollo-boost\";\n\nexport const GET_USER = gql`\n  query getUser($login: String!) {\n    user(login: $login) {\n      name\n      avatarUrl\n      bio\n      followers {\n        totalCount\n      }\n      following {\n        totalCount\n      }\n      repositories(first: 100, orderBy: { field: NAME, direction: DESC }) {\n        totalCount\n        nodes {\n          id\n          name\n          stargazers {\n            totalCount\n          }\n\n          forkCount\n          url\n          primaryLanguage {\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport Header from \"../../components/Header\";\nimport Form from \"../../components/Form\";\nimport Repos from \"../../components/UserRepos\";\nimport UserData from \"../../components/UserData\";\nimport Description from \"../../components/Description\";\nimport github from \"../../images/github_logo_icon.png\";\n\nimport \"./index.css\";\n\nimport { useLazyQuery } from \"@apollo/react-hooks\";\n\n// QUERYS\nimport { GET_USER } from \"../../services/graphql/Query\";\n\nconst Home = () => {\n  const [username, setUsername] = useState(\"\");\n  const [userData, setUserData] = useState();\n  const [userRepos, setUserRepos] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [fullUsername, setFullUsername] = useState(\"\");\n\n  const [searchUser, { called, loading, data, error }] = useLazyQuery(\n    GET_USER,\n    {\n      variables: { login: fullUsername },\n    }\n  );\n\n  function handleSearch() {\n    setFullUsername(username);\n    searchUser();\n  }\n\n  useEffect(() => {\n    if (called && !loading && data) {\n      //define user\n      const user = {\n        avatar_url: data.user.avatarUrl,\n        name: data.user.name,\n        bio: data.user.bio || \"\",\n        followers: data.user.followers.totalCount,\n        following: data.user.following.totalCount,\n        public_repos: data.user.repositories.totalCount,\n      };\n\n      //define repositories\n      const Allrepos = [];\n      data.user.repositories.nodes.map((repo) =>\n        Allrepos.push({\n          name: repo.name,\n          id: repo.id,\n          language: repo.primaryLanguage ? repo.primaryLanguage.name : \"\",\n          html_url: repo.url,\n          stargazers_count: repo.stargazers.totalCount,\n          forks: repo.forkCount,\n        })\n      );\n\n      const repos = sort(Allrepos);\n      setUserData(user);\n      setUserRepos(repos);\n    }\n  }, [data, called]);\n\n  useEffect(() => {\n    if (error) {\n      setUserData();\n      setUserRepos([]);\n      setErrorMessage(error.message);\n    }\n  }, [error]);\n\n  // ordena o array de acordo com o numero de forks e stars\n  function sort(repos, quantity = 5) {\n    const sortedData = repos.sort(\n      (b, a) => a.forks + a.stargazers_count - (b.forks + b.stargazers_count)\n    );\n    const firstFive = sortedData.splice(0, quantity);\n    return firstFive;\n  }\n\n  function isEnter(e) {\n    if (e.keyCode === 13) {\n      handleSearch();\n    }\n  }\n\n  function getUserName(e) {\n    setUsername(e.target.value);\n\n    // se nao tiver nenhuma letra na pesquisa, fecha-se o profile\n    if (e.target.value === \"\") {\n      setUserData();\n      setUserRepos([]);\n      setErrorMessage(\"\");\n    }\n  }\n\n  return (\n    <div className=\"Home\">\n      <Header />\n      <Form\n        username={getUserName}\n        handleClick={handleSearch}\n        keyPressed={isEnter}\n        errorMessage={errorMessage}\n      />\n\n      {userData && userRepos.length > 0 && (\n        <div className=\"data\">\n          <UserData profile={userData} />\n          <div className=\"data_container\">\n            <div className=\"repos_container\">\n              {userRepos.map((repo) => (\n                <Repos key={repo.id} repo={repo} />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      <CircularProgress\n        style={{\n          margin: 10,\n          opacity: called && loading ? \"1\" : \"0\",\n        }}\n      />\n      {!userData && <Description />}\n      <span className=\"created\">\n        By Vitor Reis -{\" \"}\n        <img className=\"github_icon\" alt=\"github_logo\" src={github} />\n        <strong>/reisvitt</strong>\n      </span>\n    </div>\n  );\n};\n\nexport default Home;\n","import ApolloClient from \"apollo-boost\";\n\nconst baseUrl = \"https://api.github.com/graphql\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    operation.setContext({\n      headers: {\n        authorization: `token ${process.env.REACT_APP_TOKEN}`,\n      },\n    });\n  },\n  uri: baseUrl,\n});\n\nexport default client;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./pages/Home\";\nimport client from \"./services/client\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Home />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}